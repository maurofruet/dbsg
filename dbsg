#!/bin/bash
#=============================================================================
#
#         FILE:  dbsg
#        USAGE:  dbsg [option]
#  DESCRIPTION:  Schedule a desktop background slideshow for systems running
#                GNOME 3.
#      OPTIONS:  see function ’usage’ below
# REQUIREMENTS:  GNOME 3, cron
#       AUTHOR:  Mauro Fruet <maurofruet@gmail.com>
#      VERSION:  1.1
#      CREATED:  Apr 06, 2012
#     REVISION:  Apr 10, 2012
#
#=============================================================================

PROGRAM="dbsg"                               # program name
CONF="$HOME/.$PROGRAM/$PROGRAM.conf"         # configuration file
WALLPAPERS="$HOME/.$PROGRAM/wallpapers.txt"  # wallpaper list
MINUTES=30                                   # time between backgrounds
LOG="$HOME/.$PROGRAM/$PROGRAM.log"           # log file
VERSION="1.1"                                # version of the program

if [ -f "$CONF" ]; then
    . "$CONF"
else
    declare -a folders
fi

#=== FUNCTION ================================================================
#        NAME: add_folders
# DESCRIPTION: Add folders to be monitored.
#=============================================================================
add_folders() {
    check_configuration_folder
    check_permission
    if [ -f "$CONF" ]; then
        rm "$CONF"
        print_folders
    fi
    echo -e "\nPlease Enter the full path of the image folders that you want"
    echo "to set as your desktop background. Please leave an empty line and"
    echo "press <Enter> when you have finished."

    #-------------------------------------------------------------------------
    # Let the user interactively add folders to be monitored by specifying
    # their full paths. Check that the user adds at least one folder and that
    # added paths correspond to existing folders. Terminate addition of new
    # folders by leaving an empty line and pressing <Enter>.
    #-------------------------------------------------------------------------
    declare -i i=${#folders[@]}
    while true; do
        echo -e -n "\nFolder #$((i+1)): "
        read folders["$i"]
        if [ -z ${folders[$i]} ]; then
            break
        elif [ -z ${folders[0]} ]; then
            echo -e "\nPlease enter at least one folder."
            i=i-1
        elif [ ! -d ${folders[$i]} ]; then
            echo "This folder does not exist. Please enter a valid one."
            i=i-1
        fi
        i=i+1
    done

    if [ $(check_schedule) = false ]; then
        while true; do
            echo -n "Do you want to schedule the slideshow? (y/n) "
            read answer
            if [ $answer = "y" ]; then
                update_slideshow schedule
                break
            elif [ $answer = "n" ]; then
                break
            else
                echo "Please answer 'y' or 'n'."
            fi
        done
    fi

    #-------------------------------------------------------------------------
    # Print the list of currently monitored folders and update it in the
    # configuration file. Then, update the wallpaper list and change the
    # current desktop background.
    #-------------------------------------------------------------------------
    print_folders
    echo "folders=(${folders[@]})" > "$CONF"
    update_wallpapers
    change_wallpaper
}

#=== FUNCTION ================================================================
#        NAME: change_wallpaper
# DESCRIPTION: Change the current desktop background.
#=============================================================================
change_wallpaper() {
    check_permission
    check_folders
    update_wallpapers

    #-------------------------------------------------------------------------
    # Select a random line in the wallpaper list and set the corresponding
    # file as the new desktop background.
    #-------------------------------------------------------------------------
    lines=$(cat $WALLPAPERS | wc -l)
    line=$(( $RANDOM % $lines + 1 ))
    image=$(head -$line $WALLPAPERS | tail -1)
    check_wallpaper "$image"
    new="file://$image"
    gsettings set org.gnome.desktop.background picture-uri "$new"
    current=$(get_current_wallpaper)
    if [ "$image" != "$current" ]; then
        # This should never happen
        timestamp=$(date "+%Y-%m-%d, %H:%M")
        echo "$timestamp - Wallpaper not changed! Some error occurred" \
                >> "$LOG"
        exit 3
    fi
}

#=== FUNCTION ================================================================
#        NAME: check_configuration_folder
# DESCRIPTION: Check if the configuration folder does exist.
#=============================================================================
check_configuration_folder() {
    if [ ! -d "$HOME/.$PROGRAM" ]; then
        mkdir -p "$HOME/.$PROGRAM"
    fi
}

#=== FUNCTION ================================================================
#        NAME: check_folders
# DESCRIPTION: Check if all monitored folders do exist.
#=============================================================================
check_folders() {
    declare -i i=0
    while [ "${folders[$i]}" != "" ]; do
        if [ ! -d "${folders[$i]}" ]; then
            timestamp=$(date "+%Y-%m-%d, %H:%M")
            echo "$timestamp - Folder ${folders[$i]} does not exist!" \
                >> "$LOG"
            exit 2
        fi
        i=i+1
    done
}

#=== FUNCTION ================================================================
#        NAME: check_permission
# DESCRIPTION: Check if cron has the permission to change the desktop
#              background.
#=============================================================================
check_permission() {
    #-------------------------------------------------------------------------
    # Check if the system is using GNOME 3 as desktop environment.
    #-------------------------------------------------------------------------
    xpid=$(pidof gnome-session)
    if [ -z "$xpid" ]; then
        echo "Sorry, this program is designed to work only in GNOME 3."
        exit 5
    fi

    #-------------------------------------------------------------------------
    # Tell cron what is the display currently used.
    #-------------------------------------------------------------------------
    xdisp=$(awk 'BEGIN{RS="\\000";FS="="}($1 == "DISPLAY"){print $2}' \
                < "/proc/$xpid/environ")
    export DISPLAY="$xdisp"


    #-------------------------------------------------------------------------
    # Check if the file .Xauthority is present in the home folder of the user.
    #-------------------------------------------------------------------------
    if [ ! -f "$HOME/.Xauthority" ]; then
        cmd='[ "$XAUTHORITY" ] && cp -f "$XAUTHORITY" ~/.Xauthority'
        dest="$HOME/.xprofile"
        if [ ! -f "$HOME/.xprofile" ]; then
            echo "$cmd" > "$dest"
        else
            cmd='\[ "$XAUTHORITY" \] && cp -f "$XAUTHORITY" ~/.Xauthority'
            permitted=$(more "$dest" | grep "$cmd" | wc -l)
            if [ "$permitted" -eq 0 ]; then
                echo "$cmd" >> "$dest"
            fi
        fi
    fi
}

#=== FUNCTION ================================================================
#        NAME: check_schedule
# DESCRIPTION: Check if the wallpaper slideshow has been scheduled.
#=============================================================================
check_schedule() {
    scheduled=0
    if [ -f "/var/spool/cron/$USER" ]; then
        scheduled=$(crontab -l | grep "dbsg -c" | wc -l)
    fi
    if [ "$scheduled" -eq 0 ]; then
        echo false
    else
        echo true
    fi
}

#=== FUNCTION ================================================================
#        NAME: check_wallpapers
# DESCRIPTION: Check if the wallpaper has been deleted.
# PARAMETER 1: Image to check
#=============================================================================
check_wallpaper() {
    if [ ! -f "$1" ]; then
        timestamp=$(date "+%Y-%m-%d, %H:%M")
        echo "$timestamp - File $1 has been deleted!" >> "$LOG"
        update_wallpapers
    fi
}

#=== FUNCTION ================================================================
#        NAME: delete_current_wallpaper
# DESCRIPTION: Delete the image of the current desktop background.
#=============================================================================
delete_current_wallpaper() {
    #-------------------------------------------------------------------------
    # Remove the image corresponding to the current desktop background if it
    # has not been already manually deleted by the user. Then, change the
    # current desktop background.
    #-------------------------------------------------------------------------
    current=$(get_current_wallpaper)
    if [ ! -f "$current" ]; then
        echo "Error: the file does not exist."
        exit 4
    else
        rm "$current"
        echo "File successfully removed."
        timestamp=$(date "+%Y-%m-%d, %H:%M")
        echo "$timestamp - Wallpaper removed: $current" >> "$LOG"
    fi
    change_wallpaper
}

#=== FUNCTION ================================================================
#        NAME: get_current_wallpaper
# DESCRIPTION: Return the current desktop background.
#=============================================================================
get_current_wallpaper() {
    echo $(gsettings get org.gnome.desktop.background picture-uri |
            sed "s/'//g" | sed 's/file:\/\///')
}

#=== FUNCTION ================================================================
#        NAME: number_of_wallpapers
# DESCRIPTION: Show the number of currently monitored wallpapers.
#=============================================================================
number_of_wallpapers() {
    n=0
    if [ -f $WALLPAPERS ]; then
        n=$(more $WALLPAPERS | wc -l)
    fi
    echo -e "\n$PROGRAM is currently monitoring $n wallpapers.\n"
}

#=== FUNCTION ================================================================
#        NAME: print_folders
# DESCRIPTION: Print the list of currently monitored folders.
#=============================================================================
print_folders() {
    if [ "${#folders[@]}" -eq 0 ]; then
        echo -e "\n$PROGRAM is not currently monitoring any folder.\n"
    else
        echo -e "\n$PROGRAM is currently monitoring the following folders:\n"
    fi
    for folder in "${folders[@]}"; do
        echo "$folder"
    done
}

#=== FUNCTION ================================================================
#        NAME: remove_folders
# DESCRIPTION: Remove folders to be monitored.
#=============================================================================
remove_folders() {
    if [ -f "$CONF" ]; then
        print_folders
    fi
    echo -e "\nEnter the full path of the image folders that you do not want"
    echo "to monitor anymore. Please leave an empty line and press <Enter>"
    echo "when you have finished."
    
    #-------------------------------------------------------------------------
    # Let the user interactively remove folders to be monitored by specifying
    # their full paths. Remove the specified folders only if they are
    # currently monitored.
    #-------------------------------------------------------------------------
	while true; do
	    echo -e -n "\nFolder: "
	    read removed_folder
        if [ -z "$removed_folder" ]; then
            break
        else
            declare -i j=0      
            monitored=false
            dim="${#folders[@]}"
            while [ "$j" -lt "$dim" ]; do
                if [ "${folders[$j]}" = "$removed_folder" ]; then
                    folders=(${folders[@]:0:$j} ${folders[@]:$j+1:$dim-$j})
                    monitored=true
                    break
                fi
                j=j+1
            done
            if [ "$monitored" = false ]; then
                echo "This folder is not currently monitored."
            fi
        fi
	done

    #-------------------------------------------------------------------------
    # Print the list of currently monitored folders and update it in the
    # configuration file. Then, update the wallpaper list and change the
    # current desktop background.
    #-------------------------------------------------------------------------
    print_folders
    echo "folders=(${folders[@]})" > $CONF
    update_wallpapers
    change_wallpaper
}

#=== FUNCTION ================================================================
#        NAME: update_slideshow
# DESCRIPTION: Use crontab to schedule or unschedule the wallpaper slideshow
#              by first backing up the current crontab file if present.
# PARAMETER 1: 'schedule' to schedule the slideshow or 'unschedule' to
#              unschedule it.
#=============================================================================
update_slideshow() {
    tmp="/tmp/crontab.tmp"
    if [ -f "/var/spool/cron/$USER" ]; then
        crontab -l | grep -v "$PROGRAM -c" > "$tmp"
    fi
    if [ "$1" = "schedule" ]; then
        if [ $(check_schedule) = true ]; then
            echo "dbsg is already scheduled."
        fi
        echo "*/$MINUTES * * * * $PROGRAM -c" >> "$tmp"
    elif [ "$1" = "unschedule" ]; then
        if [ $(check_schedule) = false ]; then
            echo "dbsg is not currently scheduled."
        fi
    else
        echo "Usage error of update_slideshow."
    fi
    crontab "$tmp"
    rm "$tmp"
}

#=== FUNCTION ================================================================
#        NAME: update_wallpapers
# DESCRIPTION: Update wallpaper list.
#=============================================================================
update_wallpapers() {
    #-------------------------------------------------------------------------
    # Let the user add folders if no one is monitored. Otherwise, read the
    # wallpaper list from the configuration file.
    #-------------------------------------------------------------------------
    if [ "${#folders[@]}" -eq 0 ]; then
        add_folders
    elif [ -f "$CONF" ]; then
        . "$CONF"
    fi
    if [ -f "$WALLPAPERS" ]; then
        rm "$WALLPAPERS"
    fi

    #-------------------------------------------------------------------------
    # Add to the wallpaper list all images with the following extensions:
    # .jpg, .bmp, .png, .tif and .gif. The search is case insensitive.
    #-------------------------------------------------------------------------
    declare -i i=0
    while [ "${folders[$i]}" != "" ]; do
        images=$(find ${folders[$i]} -type f | 
            egrep -i '\.(jpg|bmp|png|tif|gif)$')
        for file in "$images"; do
            echo "$file" >> "$WALLPAPERS"
        done
        i=i+1
    done
}

#=== FUNCTION ================================================================
#        NAME: usage
# DESCRIPTION: Show command usage
#=============================================================================
usage() {
    echo -e "\nusage: $PROGRAM option"
    echo -e "\nPossible options are:"
    echo "     -a  add folders to be monitored"
    echo "     -c  change current desktop background"
    echo "     -d  delete file of current desktop background"
    echo "     -g  get and show path of current desktop background"
    echo "     -n  show number of monitored wallpapers"
    echo "     -p  print list of monitored folders"
    echo "     -r  stop monitoring specific folders"
    echo "     -s  schedule the slideshow"
    echo "     -u  unschedule the slideshow"
    echo "     -v  show the version of the program"
    echo " --help  show usage"
    echo -e "\nSee the man page for more details.\n"
}

#=== FUNCTION ================================================================
#        NAME: show_version
# DESCRIPTION: Show the version of the program
#=============================================================================
show_version() {
    echo "The version of $PROGRAM installed on your system is $VERSION"
}

if [ -n "$2" ]; then
    usage
    exit 1
fi

case "$1" in
    -a) add_folders;;
    -c) change_wallpaper;;
    -d) delete_current_wallpaper;;
    -g) get_current_wallpaper;;
    -n) number_of_wallpapers;;
    -p) print_folders;;
    -r) remove_folders;;
    -s) update_slideshow schedule;;
    -u) update_slideshow unschedule;;
    -v) show_version;;
    --help) usage;;
    *) usage; exit 1
esac
exit 0
